---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getCollection } from 'astro:content';
import { isAuthenticated } from '../../../utils/auth';

// Verificar autenticación primero
const isAuth = await isAuthenticated(Astro.request);
if (!isAuth) {
  console.log('Productos index: Usuario no autenticado, redirigiendo a login');
  return Astro.redirect('/admin/login');
}

// Obtener todos los productos
const productos = await getCollection('productos');
---

<AdminLayout title="Gestión de Productos" activeLink="productos">
    <div>
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-primary">Gestión de Productos</h1>
        <div class="flex space-x-4">
          <a href="/admin/productos/nuevo" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-opacity-90 transition flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Nuevo Producto
          </a>
          <a href="/admin/productos/limpieza" class="px-4 py-2 bg-secondary text-primary rounded-md hover:bg-opacity-90 transition flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Limpieza de Datos
          </a>
        </div>
      </div>
      
      <!-- Filtros mejorados con ancho completo -->
      <div class="mb-6 p-5 bg-secondary rounded-lg shadow-sm">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-5">
          <div>
            <label for="searchInput" class="block text-sm font-medium text-gray-600 mb-1">Buscar</label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input 
                type="text" 
                id="searchInput" 
                placeholder="Nombre o ID del producto" 
                class="w-full pl-10 px-3 py-2.5 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              >
            </div>
          </div>
          
          <div>
            <label for="categoryFilter" class="block text-sm font-medium text-gray-600 mb-1">Categoría</label>
            <select 
              id="categoryFilter" 
              class="w-full px-3 py-2.5 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent appearance-none bg-white"
            >
              <option value="">Todas las categorías</option>
              <option value="destacados">Destacados</option>
              <option value="nuevos">Nuevos</option>
              <!-- Más categorías aquí -->
            </select>
          </div>
          
          <div>
            <label for="stockFilter" class="block text-sm font-medium text-gray-600 mb-1">Stock</label>
            <select 
              id="stockFilter" 
              class="w-full px-3 py-2.5 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent appearance-none bg-white"
            >
              <option value="">Todos</option>
              <option value="instock">En stock</option>
              <option value="lowstock">Stock bajo</option>
              <option value="outofstock">Sin stock</option>
            </select>
          </div>
        </div>
      </div>
      
      <!-- Tabla de productos -->
      <div class="overflow-x-auto bg-white rounded-lg shadow">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-[#1E2A3C]">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Producto
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Precio
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Stock
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Categorías
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Destacado
              </th>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {productos.map((producto) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                      <img 
                        class="h-10 w-10 rounded-md object-cover" 
                        src={producto.data.imagenes && producto.data.imagenes.length > 0 ? producto.data.imagenes[0] : '/blog-placeholder-1.jpg'} 
                        alt={producto.data.nombre}
                      />
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-[#1E2A3C]">
                        {producto.data.nombre}
                      </div>
                      <div class="text-xs text-[#6c7983]">
                        ID: {producto.id}
                      </div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm text-[#1E2A3C]">${producto.data.precio.toFixed(2)}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                    ${producto.data.stock > 5 ? 'bg-green-100 text-green-800' : 
                      producto.data.stock > 0 ? 'bg-yellow-100 text-yellow-800' : 
                      'bg-red-100 text-red-800'}`}>
                    {producto.data.stock > 5 ? 'En stock' : 
                     producto.data.stock > 0 ? 'Stock bajo' : 
                     'Sin stock'} ({producto.data.stock})
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex flex-wrap gap-1">
                    {producto.data.categorias && producto.data.categorias.map((categoria) => (
                      <span class="px-2 py-1 text-xs rounded bg-[#EDEDED] text-[#6c7983]">
                        {categoria}
                      </span>
                    ))}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-[#1E2A3C]">
                  {producto.data.destacado ? (
                    <span class="text-green-600">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                      </svg>
                    </span>
                  ) : (
                    <span class="text-gray-400">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                      </svg>
                    </span>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex justify-end space-x-2">
                    <a href={`/admin/productos/editar/${producto.id}`} class="text-[#1E2A3C] hover:text-[#D42C17]">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </a>
                    <button class="text-[#D42C17] hover:text-[#D42C17] delete-product" data-id={producto.id}>
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <!-- Paginación -->
      <div class="flex justify-between items-center mt-6">
        <div class="text-sm text-[#6c7983]">
          Mostrando <span class="font-medium">{productos.length}</span> productos
        </div>
        <div class="flex space-x-2">
          <button class="px-3 py-1 border border-gray-300 rounded-md text-sm text-[#1E2A3C] disabled:opacity-50">
            Anterior
          </button>
          <button class="px-3 py-1 bg-[#1E2A3C] text-white rounded-md text-sm">
            1
          </button>
          <button class="px-3 py-1 border border-gray-300 rounded-md text-sm text-[#1E2A3C]">
            Siguiente
          </button>
        </div>
      </div>
    </div>
  </AdminLayout>

<script>
  // Búsqueda y filtrado
  const searchInput = document.getElementById('searchInput');
  const categoryFilter = document.getElementById('categoryFilter');
  const stockFilter = document.getElementById('stockFilter');
  const productRows = document.querySelectorAll('tbody tr');
  
  function applyFilters() {
    const searchTerm = searchInput.value.toLowerCase();
    const categoryValue = categoryFilter.value.toLowerCase();
    const stockValue = stockFilter.value.toLowerCase();
    
    productRows.forEach(row => {
      const productName = row.querySelector('td:first-child .text-sm').textContent.toLowerCase();
      const productId = row.querySelector('td:first-child .text-xs').textContent.toLowerCase();
      const categories = Array.from(row.querySelectorAll('td:nth-child(4) span')).map(span => span.textContent.toLowerCase());
      const stockStatus = row.querySelector('td:nth-child(3) span').textContent.toLowerCase();
      
      const matchesSearch = searchTerm === '' || productName.includes(searchTerm) || productId.includes(searchTerm);
      const matchesCategory = categoryValue === '' || categories.includes(categoryValue);
      const matchesStock = stockValue === '' || 
                          (stockValue === 'instock' && stockStatus.includes('en stock')) ||
                          (stockValue === 'lowstock' && stockStatus.includes('stock bajo')) ||
                          (stockValue === 'outofstock' && stockStatus.includes('sin stock'));
      
      row.style.display = matchesSearch && matchesCategory && matchesStock ? '' : 'none';
    });
  }
  
  searchInput.addEventListener('input', applyFilters);
  categoryFilter.addEventListener('change', applyFilters);
  stockFilter.addEventListener('change', applyFilters);
  
  // Eliminar producto
  const deleteButtons = document.querySelectorAll('.delete-product');
  
  // Crear un div para mostrar logs de depuración en la página
  const debugContainer = document.createElement('div');
  debugContainer.id = 'debug-container';
  debugContainer.style.position = 'fixed';
  debugContainer.style.bottom = '20px';
  debugContainer.style.right = '20px';
  debugContainer.style.width = '400px';
  debugContainer.style.maxHeight = '300px';
  debugContainer.style.overflowY = 'auto';
  debugContainer.style.backgroundColor = 'rgba(0,0,0,0.8)';
  debugContainer.style.color = '#00ff00';
  debugContainer.style.padding = '10px';
  debugContainer.style.borderRadius = '5px';
  debugContainer.style.fontFamily = 'monospace';
  debugContainer.style.fontSize = '12px';
  debugContainer.style.zIndex = '9999';
  document.body.appendChild(debugContainer);
  
  // Función para mostrar logs en la página
  function debugLog(message) {
    console.log(message);
    const logEntry = document.createElement('div');
    logEntry.textContent = `${new Date().toISOString().substr(11, 8)}: ${message}`;
    debugContainer.appendChild(logEntry);
    debugContainer.scrollTop = debugContainer.scrollHeight;
  }
  
  debugLog('Inicializando sistema de eliminación de productos');
  debugLog(`Encontrados ${deleteButtons.length} botones de eliminación`);
  
  deleteButtons.forEach((button, index) => {
    const productId = button.getAttribute('data-id');
    debugLog(`Botón #${index+1} configurado para producto ID: ${productId}`);
    
    button.addEventListener('click', async () => {
      const productId = button.getAttribute('data-id');
      debugLog(`Click en botón de eliminar para producto ID: ${productId}`);
      
      if (confirm(`¿Estás seguro de que deseas eliminar este producto? Esta acción no se puede deshacer.`)) {
        debugLog(`Confirmación aceptada para eliminar producto ID: ${productId}`);
        try {
          // Deshabilitar botón mientras se procesa
          button.innerHTML = `
            <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          `;
          button.disabled = true;
          debugLog(`Botón deshabilitado, mostrando spinner...`);
          
          debugLog(`Enviando solicitud DELETE a /api/productos/${productId}`);
          const response = await fetch(`/api/productos/${productId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          debugLog(`Respuesta recibida: status=${response.status}`);
          
          const responseData = await response.json();
          debugLog(`Datos de respuesta: ${JSON.stringify(responseData)}`);
          
          if (!response.ok) {
            debugLog(`Error en la respuesta: ${response.status} ${response.statusText}`);
            throw new Error(responseData.error || 'Error al eliminar el producto');
          }
          
          debugLog(`Producto eliminado exitosamente, actualizando UI...`);
          
          // Eliminar la fila de la tabla
          const row = button.closest('tr');
          if (row) {
            debugLog(`Fila encontrada, aplicando animación de eliminación`);
            row.style.backgroundColor = '#fee2e2';
            setTimeout(() => {
              row.remove();
              debugLog(`Fila eliminada de la tabla`);
              // Actualizar contador
              const countElement = document.querySelector('.text-sm.text-[#6c7983]');
              if (countElement) {
                const count = document.querySelectorAll('tbody tr').length;
                countElement.innerHTML = `Mostrando <span class="font-medium">${count}</span> productos`;
                debugLog(`Contador actualizado: ${count} productos`);
              }
            }, 500);
          } else {
            debugLog(`No se encontró la fila para eliminar, recargando página`);
            // Si no se puede eliminar la fila, recargar la página
            window.location.reload();
          }
        } catch (error) {
          debugLog(`ERROR: ${error.message}`);
          console.error('Error:', error);
          alert('Error: ' + (error.message || 'Error al eliminar el producto'));
          
          // Restaurar botón
          button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          `;
          button.disabled = false;
          debugLog(`Botón restaurado después del error`);
        }
      } else {
        debugLog(`Eliminación cancelada por el usuario`);
      }
    });
  });
</script>
